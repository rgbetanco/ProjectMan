// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using repairman.Data;

#nullable disable

namespace projectman.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20221026064558_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("repairman.Models.CompanyAddressModel", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<string>("addr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("company_id")
                        .HasColumnType("bigint");

                    b.Property<short>("type")
                        .HasColumnType("smallint");

                    b.HasKey("ID");

                    b.HasIndex("company_id");

                    b.ToTable("company_address");
                });

            modelBuilder.Entity("repairman.Models.CompanyEmailModel", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<long>("company_id")
                        .HasColumnType("bigint");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("type")
                        .HasColumnType("smallint");

                    b.HasKey("ID");

                    b.HasIndex("company_id");

                    b.ToTable("company_email");
                });

            modelBuilder.Entity("repairman.Models.CompanyModel", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<long?>("credit_id")
                        .HasColumnType("bigint");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nationalID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("credit_id");

                    b.ToTable("company");
                });

            modelBuilder.Entity("repairman.Models.CompanyPhoneModel", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<long>("company_id")
                        .HasColumnType("bigint");

                    b.Property<string>("number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("type")
                        .HasColumnType("smallint");

                    b.HasKey("ID");

                    b.HasIndex("company_id");

                    b.ToTable("company_phone");
                });

            modelBuilder.Entity("repairman.Models.ContactModel", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("contact");
                });

            modelBuilder.Entity("repairman.Models.CreditModel", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("credit");
                });

            modelBuilder.Entity("repairman.Models.Dept", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<string>("desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Depts");
                });

            modelBuilder.Entity("repairman.Models.Group", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<DateTime>("date_created")
                        .HasColumnType("datetime2");

                    b.Property<string>("desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("group");
                });

            modelBuilder.Entity("repairman.Models.IncomingPaymentModel", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<double>("amount")
                        .HasColumnType("float");

                    b.Property<string>("invoice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("issueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("item")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("project_id")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("project_id");

                    b.ToTable("incoming_payment");
                });

            modelBuilder.Entity("repairman.Models.Member", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<int>("bad_password_count")
                        .HasColumnType("int");

                    b.Property<DateTime>("date_created")
                        .HasColumnType("datetime2");

                    b.Property<long?>("dept_id")
                        .HasColumnType("bigint");

                    b.Property<string>("desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("enabled")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("dept_id");

                    b.ToTable("member");
                });

            modelBuilder.Entity("repairman.Models.OutgoingPaymentModel", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<double>("amount")
                        .HasColumnType("float");

                    b.Property<long?>("company_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("issueDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("project_id")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("company_id");

                    b.HasIndex("project_id");

                    b.ToTable("outgoing_payment");
                });

            modelBuilder.Entity("repairman.Models.PermGroup", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<long?>("group_id")
                        .HasColumnType("bigint");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.Property<string>("win_group_sid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("group_id");

                    b.ToTable("perm_group");
                });

            modelBuilder.Entity("repairman.Models.PersonaAddressModel", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<string>("addr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("persona_id")
                        .HasColumnType("bigint");

                    b.Property<short>("type")
                        .HasColumnType("smallint");

                    b.HasKey("ID");

                    b.HasIndex("persona_id");

                    b.ToTable("persona_address");
                });

            modelBuilder.Entity("repairman.Models.PersonaCompanyModel", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<long>("company_id")
                        .HasColumnType("bigint");

                    b.Property<string>("job_title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("persona_id")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("company_id");

                    b.HasIndex("persona_id");

                    b.ToTable("persona_company");
                });

            modelBuilder.Entity("repairman.Models.PersonaEmailModel", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("persona_id")
                        .HasColumnType("bigint");

                    b.Property<short>("type")
                        .HasColumnType("smallint");

                    b.HasKey("ID");

                    b.HasIndex("persona_id");

                    b.ToTable("persona_email");
                });

            modelBuilder.Entity("repairman.Models.PersonaModel", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<string>("department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("remarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("persona");
                });

            modelBuilder.Entity("repairman.Models.PersonaPhoneModel", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<bool>("default_number")
                        .HasColumnType("bit");

                    b.Property<string>("number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("persona_id")
                        .HasColumnType("bigint");

                    b.Property<short>("type")
                        .HasColumnType("smallint");

                    b.HasKey("ID");

                    b.HasIndex("persona_id");

                    b.ToTable("persona_phone");
                });

            modelBuilder.Entity("repairman.Models.ProductBrandModel", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<string>("brand_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("category")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("product_brand");
                });

            modelBuilder.Entity("repairman.Models.ProductModel", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<int>("category")
                        .HasColumnType("int");

                    b.Property<long?>("product_brand_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("product_model_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("project_id")
                        .HasColumnType("bigint");

                    b.Property<string>("serial_number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("product_brand_id");

                    b.HasIndex("product_model_id");

                    b.HasIndex("project_id");

                    b.ToTable("product_list");
                });

            modelBuilder.Entity("repairman.Models.ProductModelModel", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<int>("category")
                        .HasColumnType("int");

                    b.Property<string>("model_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("product_model");
                });

            modelBuilder.Entity("repairman.Models.ProjectModel", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<long?>("company_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("connected_project_id")
                        .HasColumnType("bigint");

                    b.Property<string>("contact_address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("contact_phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ending_datetime")
                        .HasColumnType("datetime2");

                    b.Property<int>("importance_id")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("persona_id")
                        .HasColumnType("bigint");

                    b.Property<string>("remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("service_type")
                        .HasColumnType("int");

                    b.Property<DateTime>("starting_datetime")
                        .HasColumnType("datetime2");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<long?>("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("company_id");

                    b.HasIndex("persona_id");

                    b.HasIndex("user_id");

                    b.ToTable("project");
                });

            modelBuilder.Entity("repairman.Models.ServiceRequest", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<long>("dept_id")
                        .HasColumnType("bigint");

                    b.Property<string>("desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("member_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("modify_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<long>("sub_cat_id")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("dept_id");

                    b.HasIndex("member_id");

                    b.HasIndex("sub_cat_id");

                    b.ToTable("ServiceRequests");
                });

            modelBuilder.Entity("repairman.Models.ServiceRequestCat", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<string>("desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ServiceRequestCats");
                });

            modelBuilder.Entity("repairman.Models.ServiceRequestFile", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<string>("filename")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("request_id")
                        .HasColumnType("bigint");

                    b.Property<string>("source_file")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("request_id");

                    b.ToTable("ServiceRequestFiles");
                });

            modelBuilder.Entity("repairman.Models.ServiceRequestPic", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<string>("output_file")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("request_id")
                        .HasColumnType("bigint");

                    b.Property<string>("source_file")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("thumb_file")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("request_id");

                    b.ToTable("ServiceRequestPics");
                });

            modelBuilder.Entity("repairman.Models.ServiceRequestReply", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<string>("desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("modify_date")
                        .HasColumnType("datetime2");

                    b.Property<long>("request_id")
                        .HasColumnType("bigint");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("request_id");

                    b.HasIndex("user_id");

                    b.ToTable("ServiceRequestReplies");
                });

            modelBuilder.Entity("repairman.Models.ServiceRequestReplyFile", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<string>("filename")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("reply_id")
                        .HasColumnType("bigint");

                    b.Property<string>("source_file")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("reply_id");

                    b.ToTable("ServiceRequestReplyFiles");
                });

            modelBuilder.Entity("repairman.Models.ServiceRequestReplyPic", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<string>("output_file")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("reply_id")
                        .HasColumnType("bigint");

                    b.Property<string>("source_file")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("thumb_file")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("reply_id");

                    b.ToTable("ServiceRequestReplyPics");
                });

            modelBuilder.Entity("repairman.Models.ServiceRequestSubCat", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<long>("cat_id")
                        .HasColumnType("bigint");

                    b.Property<string>("desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("cat_id");

                    b.ToTable("ServiceRequestSubCats");
                });

            modelBuilder.Entity("repairman.Models.User", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<int>("bad_password_count")
                        .HasColumnType("int");

                    b.Property<DateTime>("date_created")
                        .HasColumnType("datetime2");

                    b.Property<string>("desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("enabled")
                        .HasColumnType("bit");

                    b.Property<bool>("isSalePerson")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("perm")
                        .HasColumnType("int");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("win_user_sid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("username")
                        .IsUnique();

                    b.ToTable("user");
                });

            modelBuilder.Entity("repairman.Models.UserGroup", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<long>("group_id")
                        .HasColumnType("bigint");

                    b.Property<long>("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("group_id");

                    b.HasIndex("user_id");

                    b.ToTable("user_group");
                });

            modelBuilder.Entity("repairman.Models.CompanyAddressModel", b =>
                {
                    b.HasOne("repairman.Models.CompanyModel", "company")
                        .WithMany("address")
                        .HasForeignKey("company_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("company");
                });

            modelBuilder.Entity("repairman.Models.CompanyEmailModel", b =>
                {
                    b.HasOne("repairman.Models.CompanyModel", "company")
                        .WithMany("email")
                        .HasForeignKey("company_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("company");
                });

            modelBuilder.Entity("repairman.Models.CompanyModel", b =>
                {
                    b.HasOne("repairman.Models.CreditModel", "credit")
                        .WithMany()
                        .HasForeignKey("credit_id");

                    b.Navigation("credit");
                });

            modelBuilder.Entity("repairman.Models.CompanyPhoneModel", b =>
                {
                    b.HasOne("repairman.Models.CompanyModel", "company")
                        .WithMany("phone")
                        .HasForeignKey("company_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("company");
                });

            modelBuilder.Entity("repairman.Models.IncomingPaymentModel", b =>
                {
                    b.HasOne("repairman.Models.ProjectModel", "project")
                        .WithMany("incoming_payment")
                        .HasForeignKey("project_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("project");
                });

            modelBuilder.Entity("repairman.Models.Member", b =>
                {
                    b.HasOne("repairman.Models.Dept", "dept")
                        .WithMany()
                        .HasForeignKey("dept_id");

                    b.Navigation("dept");
                });

            modelBuilder.Entity("repairman.Models.OutgoingPaymentModel", b =>
                {
                    b.HasOne("repairman.Models.CompanyModel", "company")
                        .WithMany()
                        .HasForeignKey("company_id");

                    b.HasOne("repairman.Models.ProjectModel", "project")
                        .WithMany("outgoing_payment")
                        .HasForeignKey("project_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("company");

                    b.Navigation("project");
                });

            modelBuilder.Entity("repairman.Models.PermGroup", b =>
                {
                    b.HasOne("repairman.Models.Group", "group")
                        .WithMany()
                        .HasForeignKey("group_id");

                    b.Navigation("group");
                });

            modelBuilder.Entity("repairman.Models.PersonaAddressModel", b =>
                {
                    b.HasOne("repairman.Models.PersonaModel", "persona")
                        .WithMany("address")
                        .HasForeignKey("persona_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("persona");
                });

            modelBuilder.Entity("repairman.Models.PersonaCompanyModel", b =>
                {
                    b.HasOne("repairman.Models.CompanyModel", "company")
                        .WithMany()
                        .HasForeignKey("company_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("repairman.Models.PersonaModel", "persona")
                        .WithMany("personas_company")
                        .HasForeignKey("persona_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("company");

                    b.Navigation("persona");
                });

            modelBuilder.Entity("repairman.Models.PersonaEmailModel", b =>
                {
                    b.HasOne("repairman.Models.PersonaModel", "persona")
                        .WithMany("email")
                        .HasForeignKey("persona_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("persona");
                });

            modelBuilder.Entity("repairman.Models.PersonaPhoneModel", b =>
                {
                    b.HasOne("repairman.Models.PersonaModel", "persona")
                        .WithMany("phone")
                        .HasForeignKey("persona_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("persona");
                });

            modelBuilder.Entity("repairman.Models.ProductModel", b =>
                {
                    b.HasOne("repairman.Models.ProductBrandModel", "brand")
                        .WithMany()
                        .HasForeignKey("product_brand_id");

                    b.HasOne("repairman.Models.ProductModelModel", "model")
                        .WithMany()
                        .HasForeignKey("product_model_id");

                    b.HasOne("repairman.Models.ProjectModel", "project")
                        .WithMany("product_list")
                        .HasForeignKey("project_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("brand");

                    b.Navigation("model");

                    b.Navigation("project");
                });

            modelBuilder.Entity("repairman.Models.ProjectModel", b =>
                {
                    b.HasOne("repairman.Models.CompanyModel", "company")
                        .WithMany()
                        .HasForeignKey("company_id");

                    b.HasOne("repairman.Models.PersonaModel", "persona")
                        .WithMany()
                        .HasForeignKey("persona_id");

                    b.HasOne("repairman.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("user_id");

                    b.Navigation("company");

                    b.Navigation("persona");

                    b.Navigation("user");
                });

            modelBuilder.Entity("repairman.Models.ServiceRequest", b =>
                {
                    b.HasOne("repairman.Models.Dept", "dept")
                        .WithMany("requests")
                        .HasForeignKey("dept_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("repairman.Models.Member", "member")
                        .WithMany()
                        .HasForeignKey("member_id");

                    b.HasOne("repairman.Models.ServiceRequestSubCat", "sub_cat")
                        .WithMany("requests")
                        .HasForeignKey("sub_cat_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("dept");

                    b.Navigation("member");

                    b.Navigation("sub_cat");
                });

            modelBuilder.Entity("repairman.Models.ServiceRequestFile", b =>
                {
                    b.HasOne("repairman.Models.ServiceRequest", "request")
                        .WithMany("files")
                        .HasForeignKey("request_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("request");
                });

            modelBuilder.Entity("repairman.Models.ServiceRequestPic", b =>
                {
                    b.HasOne("repairman.Models.ServiceRequest", "request")
                        .WithMany("pics")
                        .HasForeignKey("request_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("request");
                });

            modelBuilder.Entity("repairman.Models.ServiceRequestReply", b =>
                {
                    b.HasOne("repairman.Models.ServiceRequest", "request")
                        .WithMany("replies")
                        .HasForeignKey("request_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("repairman.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("request");

                    b.Navigation("user");
                });

            modelBuilder.Entity("repairman.Models.ServiceRequestReplyFile", b =>
                {
                    b.HasOne("repairman.Models.ServiceRequestReply", "reply")
                        .WithMany("files")
                        .HasForeignKey("reply_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("reply");
                });

            modelBuilder.Entity("repairman.Models.ServiceRequestReplyPic", b =>
                {
                    b.HasOne("repairman.Models.ServiceRequestReply", "reply")
                        .WithMany("pics")
                        .HasForeignKey("reply_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("reply");
                });

            modelBuilder.Entity("repairman.Models.ServiceRequestSubCat", b =>
                {
                    b.HasOne("repairman.Models.ServiceRequestCat", "cat")
                        .WithMany("subcats")
                        .HasForeignKey("cat_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cat");
                });

            modelBuilder.Entity("repairman.Models.UserGroup", b =>
                {
                    b.HasOne("repairman.Models.Group", "group")
                        .WithMany()
                        .HasForeignKey("group_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("repairman.Models.User", "user")
                        .WithMany("groups")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("group");

                    b.Navigation("user");
                });

            modelBuilder.Entity("repairman.Models.CompanyModel", b =>
                {
                    b.Navigation("address");

                    b.Navigation("email");

                    b.Navigation("phone");
                });

            modelBuilder.Entity("repairman.Models.Dept", b =>
                {
                    b.Navigation("requests");
                });

            modelBuilder.Entity("repairman.Models.PersonaModel", b =>
                {
                    b.Navigation("address");

                    b.Navigation("email");

                    b.Navigation("personas_company");

                    b.Navigation("phone");
                });

            modelBuilder.Entity("repairman.Models.ProjectModel", b =>
                {
                    b.Navigation("incoming_payment");

                    b.Navigation("outgoing_payment");

                    b.Navigation("product_list");
                });

            modelBuilder.Entity("repairman.Models.ServiceRequest", b =>
                {
                    b.Navigation("files");

                    b.Navigation("pics");

                    b.Navigation("replies");
                });

            modelBuilder.Entity("repairman.Models.ServiceRequestCat", b =>
                {
                    b.Navigation("subcats");
                });

            modelBuilder.Entity("repairman.Models.ServiceRequestReply", b =>
                {
                    b.Navigation("files");

                    b.Navigation("pics");
                });

            modelBuilder.Entity("repairman.Models.ServiceRequestSubCat", b =>
                {
                    b.Navigation("requests");
                });

            modelBuilder.Entity("repairman.Models.User", b =>
                {
                    b.Navigation("groups");
                });
#pragma warning restore 612, 618
        }
    }
}
