@model repairman.Models.User
@using CSHelper.Extensions
@{
    ViewData["Title"] = "新增使用者";
    Layout = "_Layout";
}

<div class="container h-100 d-flex flex-column">
    <div class="row mb-3 mt-4">
        <div class="col">
            <button type="button" class="btn btn-light btn-back"><i class="fas fa-caret-left"></i></button>
            <h2>@ViewData["Title"]</h2>
        </div>
    </div>
    <div class="row">
        <div class="col mx-1 mx-md-5">

            <form id="update" asp-action="New">
                @Html.AntiForgeryToken()

                <div class="mb-3">
                    @Html.LabelFor(m => m.name, new { @class = "form-label form-view-hide" })
                    @Html.TextBoxFor(m => m.name, new { @class = "form-control" })
                </div>

                <div class="mb-3">
                    @Html.LabelFor(m => m.username, new { @class = "form-label" })
                    @Html.TextBoxFor(m => m.username, new { @class = "form-control" })
                </div>

                <div class="mb-3">
                    @Html.LabelFor(m => m.pass, new { @class = "form-label" })
                    @Html.Password("pass", "", new { @class = "form-control", @id = "new-password" })
                </div>

                <div class="mb-3">
                    @Html.Label("verifypass", "確認密碼", new { @class = "form-label" })
                    @Html.Password("verifypass", "", new { @class = "form-control", @id = "verify-password" })
                </div>

                <div class="mb-3">
                    @Html.LabelFor(m => m.perm, new { @class = "form-label" })
                    <div>
                        @Html.CheckBoxesFor(m => m.perm, new { @class = "form-check" }, new { @class = "form-check-input" }, new { @class = "form-check-label" })
                    </div>
                </div>

                <div class="mb-3">
                    @Html.LabelFor(m => m.groups, new { @class = "form-label" })
                    <div>
                        @Html.CheckBoxesFor(m => m.groups, (MultiSelectList)ViewData["groups"], new { @class = "form-check" }, new { @class = "form-check-input" }, new { @class = "form-check-label" })
                    </div>
                </div>

                <div class="mb-3">
                    @Html.LabelFor(m => m.isSalePerson, new { @class = "form-label" })
                    <div>
                        @Html.CheckBoxFor(m => m.isSalePerson, new { @class = "form-check-input" })
                    </div>
                </div>

                <div class="mb-3">
                    <label class="form-label">狀態</label>
                    <div>
                        <div class="form-check">
                            @Html.CheckBoxFor(m => m.enabled, new { @class = "form-check-input" })
                            @Html.LabelFor(m => m.enabled, new { @class = "form-check-label" })
                        </div>
                    </div>
                </div>

                <div class="mb-3">
                    @Html.LabelFor(m => m.desc, new { @class = "form-label" })
                    @Html.TextAreaFor(m => m.desc, new { @class = "form-control" })
                </div>

                <div class="alert alert-danger d-none" role="alert">
                </div>

                <button type="submit" class="btn btn-primary">新增</button>

            </form>

        </div>
    </div>
</div>

@section Scripts {
<script>

    $(function () {

        var form = $('#update');
        form.initAsAjaxForm({
            success: function (data) {
                var result = createErrorList(data);
                if (result == null) {
                    window.history.back();
                } else {
                    var alert = form.find(".alert");
                    alert.html(result);
                    alert.removeClass('d-none');
                }
            },
            error: function (xhr, textStatus, errorThrown) {
                var alert = form.find(".alert");
                alert.text(AjaxErrorToString(xhr, textStatus, errorThrown));
                alert.removeClass('d-none');
            },
            validate: function () {
                if (form.find('#new-password').val() != form.find('#verify-password').val()) {
                    return "新密碼與確認密碼不同";
                }

                return null;
            }
        });
    });

</script>
} 