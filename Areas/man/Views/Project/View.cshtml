@model projectman.Models.Project
@using CSHelper.Extensions
@{
    ViewData["Title"] = "報修清單";
    ViewData["AutoReload"] = true;
    Layout = "_MenuLayout";

}

<div class="container h-100 d-flex flex-column">
    <div class="row mb-3 mt-4">
        <div class="col">
            <button type="button" class="btn btn-light btn-back"><i class="fas fa-caret-left"></i></button>

            <button class="btn btn-primary" type="button" id="update-enable-button">編輯</button>
        </div>
    </div>
    <form id="update" data-enable-button="#update-enable-button" asp-action="Update" asp-route-id="@Model.ID">
        @*Store/History buttons*@
        <div class="row">
            <div class="col text-start">
                    <button type="reset" class="btn btn-secondary">取消</button>
                    <button type="submit" class="btn btn-primary">更新</button>
            </div>
        </div>
        @*name and number *@
        <div class="row mt-4 text-start">
            <div class="col-5">
                    @Html.LabelFor(m => m.name, new { @class = "form-label form-view-hide" })
                    @Html.TextBoxFor(m => m.name, new { @class = "form-control form-text" })
            </div>
            <div class="col">
                    @Html.LabelFor(m => m.number, new { @class = "form-label" })
                    @Html.TextBoxFor(m => m.number, new {@class = "form-control form-text"})
            </div>
        </div>
        @*type and subtype*@
        <div class="row mt-4 text-start">
            <div class="col-5">
                @Html.LabelFor(m => m.type, new { @class = "form-label" })
                    @Html.DropDownListFor(m => m.type, CSHelper.Extensions.RenderingExtension.GetSelectList<ProjectType>(), new { @class = "form-control form-select", @onChange="onTypeChange(this)" })
            </div>
            <div class="col-3">
                @Html.LabelFor(m => m.subtypes, new { @class = "form-label" })
                    @Html.ListBoxFor(m => m.subtypes, m => m.subtype_id, (IEnumerable<SelectListItem>)ViewData["subtypes"], new { @class = "js-data-subtype-ajax form-select" })
            </div>
        </div>
        @*status, duplicate project, starting date, and ending date*@
        <div class="row text-start mt-4">
            <div class="col-2">
                    @Html.LabelFor(m => m.status, new { @class = "form-label" })
                    @Html.DropDownListFor(m => m.status, CSHelper.Extensions.RenderingExtension.GetSelectList<ProjectStatus>(), new { @class = "form-control form-select" })
            </div>
            <div class="col-2 mt-4">
                    <button class="btn btn-secondary" type="button" id="renew_project">轉出新案</button>
            </div>
            <div class="col-4">
                    @Html.LabelFor(m => m.starting_datetime, new { @class = "form-label form-view-hide" })
                    @Html.LocalDateTimeInputFor(m => m.starting_datetime, new { @class = "form-control", @step = "1" })
            </div>
            <div class="col-4">
                    @Html.LabelFor(m => m.ending_datetime, new { @class = "form-label form-view-hide" })
                    @Html.LocalDateTimeInputFor(m => m.ending_datetime, new { @class = "form-control", @step = "1" })
            </div>
        </div>
        @*internal company, group, sales person, importance*@
        <div class="row text-start mt-3">
            <div class="col-3">
                @Html.LabelFor(m => m.internal_company_id, new { @class = "form-label" })
                @Html.DropDownListFor(m => m.internal_company_id, (IEnumerable<SelectListItem>)ViewData["internal_company"], new { @class = "form-select" })
            </div>
            <div class="col-3">
                @Html.LabelFor(m => m.group_id, new { @class = "form-label" })
                @Html.DropDownListFor(m => m.group_id, (IEnumerable<SelectListItem>)ViewData["group"], new { @class = "form-select" })
            </div>
            <div class="col-3">
                    @Html.LabelFor(m => m.user_id, new { @class = "form-label" })
                    @Html.DropDownListFor(m => m.user_id, (IEnumerable<SelectListItem>)ViewData["sales_person"], new { @class = "form-select" })
            </div>
            <div class="col-3">
                    @Html.LabelFor(m => m.importance_id, new { @class = "form-label" })
                    @Html.DropDownListFor(m => m.importance_id, (IEnumerable<SelectListItem>)ViewData["importance"], new { @class = "form-select" })
            </div>
        </div>
        @*company*@
        <div class="row text-start mt-4">
            <div class="col-6">
                    @Html.LabelFor(m => m.company_id, new { @class = "form-label"})
                    <div class="input-group">
                        @Html.HiddenFor(m => m.company_id, new { @class = "form-control",  @readonly = "readonly" } )
                        @Html.TextBoxFor(m => m.company.name, new { @class = "form-control",  @readonly = "readonly" })
                        <button type="button" class="btn btn-secondary btn-modal"
                                data-form-target ="#update"
                                id="change-company"
                                data-url="@Url.Action("Picker", "Company")"
                                data-toggle="modal"
                                data-target="#modal-popup">
                            <i class="fa fa-crosshairs fa-fw"></i>
                        </button>
                    </div>
            </div>
            <div class="col-6">
                    @Html.LabelFor(m => m.contact.name, new { @class = "form-label"})
                    <div class="input-group">
                        @Html.DropDownListFor(m => m.contact.name, (IEnumerable<SelectListItem>)ViewData["personas"], new { @class = "form-select" })
                    <button class="btn btn-secondary" id="addContact">+新增</button>
                    </div>
            </div>
        </div>
        @*contact address and contact phone*@
        <div class="row text-start mt-4">
            <div class="col-6">
                    @Html.LabelFor(m => m.contact_address, new { @class = "form-label" })
                    @Html.TextBoxFor(m => m.contact_address, new {@class = "form-control form-text"})
            </div>
            <div class="col-5">
                    @Html.LabelFor(m => m.contact_phone, new { @class = "form-label" })
                    @Html.TextBoxFor(m => m.contact_phone, new {@class = "form-control form-text"})
            </div>

        </div>
        @*remarks*@
        <div class="row text-start mt-4">
            <div class="col-7">
                    @Html.LabelFor(m => m.remarks, new { @class = "form-label" })
                    @Html.TextAreaFor(m => m.remarks, new {@class = "form-control form-text"})
            </div>
        </div>
        @*timelines*@
        <h5>截止日期表</h5>
        <table class="table">
                <thead>
                    <tr>
                        <th scope="col">@Html.LabelFor(m => m.timelines.FirstOrDefault().due_date, new { @class = "form-label" })</th>
                        <th scope="col">@Html.LabelFor(m => m.timelines.FirstOrDefault().desc, new { @class = "form-label" })</th>
                        <th scope="col">@Html.LabelFor(m => m.timelines.FirstOrDefault().complete_date, new { @class = "form-label" })</th>
                        <th scope="col">功能</th>
                    </tr>
                </thead>
                <tbody>
                    @for (var i = 0; i < Model.timelines.Count(); i++)
                    {
                        <tr data-form-group="timelines">
                            <td scope="row">
                            @Html.LocalDateTimeInputFor(m => m.timelines[i].due_date, new { @class = "form-control", @data_form_group_subname = "due_date", @required="required" })
                        </td>
                            <td scope="row">
                                @Html.TextBoxFor(m => m.timelines[i].desc, new { @class = "form-control", @data_form_group_subname = "desc" })
                            </td>
                            <td scope="row">
                            @Html.LocalDateTimeInputFor(m => m.timelines[i].complete_date, new { @class = "form-control", @data_form_group_subname = "complete_date" })
                            </td>
                            <td scope="row">
                                @Html.HiddenFor(m => m.timelines[i].ID)
                                @Html.Hidden("timelines.Index", i)
                                <button type="button" class="btn btn-secondary btn-delete">
                                    <i class="fa fa-trash" aria-hidden="true"></i>
                                </button>
                            </td>
                        </tr>
                    }
                    <tr class="d-none" data-form-group-start="timelines" data-form-group="timelines">
                        <td scope="row">
                            @Html.TextBox("temp", DateTime.Now.ToString("yyyy-MM-dd"), new { @type="date", @class = "form-control", @data_form_group_subname = "due_date" })
                        </td>
                        <td scope="row">
                            @Html.TextBox("temp", "", new { @class = "form-control", @data_form_group_subname = "desc" })
                        </td>
                        <td scope="row">
                            @Html.TextBox("temp", "", new { @type="date", @class = "form-control", @data_form_group_subname = "complete_date" })
                        </td>
                        <td scope="row">
                            <button type="button" class="btn btn-secondary btn-delete">
                                <i class="fa fa-trash" aria-hidden="true"></i>
                            </button>
                        </td>
                    </tr>
                </tbody>
                <tfoot>
                    <tr>
                        <td>
                            <button class="btn btn-secondary" type="button" data-form-group-target="timelines">+新增</button>
                        </td>
                    </tr>
                </tfoot>
            </table>
        @*for each incoming payment*@
        <h5>應收項目</h5>
        <table class="table mt-4">
                    <thead>
                        <tr>
                            <th scope="col">@Html.LabelFor(m => m.incoming_payments.FirstOrDefault().due_date, new { @class = "form-label form-view-hide" })</th>
                            <th scope="col">@Html.LabelFor(m => m.incoming_payments.FirstOrDefault().item, new { @class = "form-label" })</th>
                            <th scope="col">@Html.LabelFor(m => m.incoming_payments.FirstOrDefault().amount, new { @class = "form-label" })</th>
                            <th scope="col">@Html.LabelFor(m => m.incoming_payments.FirstOrDefault().orderslip_number, new { @class = "form-label" })</th>
                            <th scope="col">@Html.LabelFor(m => m.incoming_payments.FirstOrDefault().orderslip_date, new { @class = "form-label" })</th>
                            <th scope="col">@Html.LabelFor(m => m.incoming_payments.FirstOrDefault().invoice_number, new { @class = "form-label" })</th>
                            <th scope="col">@Html.LabelFor(m => m.incoming_payments.FirstOrDefault().invoice_date, new { @class = "form-label" })</th>
                            <th scope="col">功能</th>
                        </tr>
                    </thead>
                    <tbody>
        
                    @for (var i = 0; i < Model.incoming_payments.Count(); i++)
                    {
                        <tr data-form-group="incoming_payments">
                            <td scope="row">
                                @Html.LocalDateTimeInputFor(m => m.incoming_payments[i].due_date, new { @class = "form-control", @data_form_group_subname = "due_date" })
                            </td>
                            <td scope="row">
                                @Html.TextBoxFor(m => m.incoming_payments[i].item, new { @class = "form-control", @data_form_group_subname = "item" })
                            </td>
                            <td scope="row">
                                @Html.TextBoxFor(m => m.incoming_payments[i].amount, new { @class = "form-control", @data_form_group_subname = "amount", @onchange = "UpdateIncomingPaymentTotals(this)" })
                            </td>
                            <td scope="row">
                                @Html.TextBoxFor(m => m.incoming_payments[i].orderslip_number, new { @class = "form-control", @data_form_group_subname = "orderslip_number" })
                            </td>
                            <td scope="row">
                                @Html.LocalDateTimeInputFor(m => m.incoming_payments[i].orderslip_date, new { @class = "form-control", @data_form_group_subname = "orderslip_date" })
                            </td>
                            <td scope="row">
                                @Html.TextBoxFor(m => m.incoming_payments[i].invoice_number, new { @class = "form-control", @data_form_group_subname = "invoice_number" })
                            </td>
                            <td scope="row">
                                @Html.LocalDateTimeInputFor(m => m.incoming_payments[i].invoice_date, new { @class = "form-control", @data_form_group_subname = "invoice_date" })
                            </td>
                            <td scope="row">
                                    @Html.HiddenFor(m => m.incoming_payments[i].ID)
                                    @Html.Hidden("incoming_payments.Index", i)
                            <button type="button" class="btn btn-secondary" onclick="formIncomingPaymentRemove(this)">
                                    <i class="fa fa-trash" aria-hidden="true"></i>
                                </button>
                            </td>
                        </tr>
                    }
                        <tr class="d-none" data-form-group-start="incoming_payments" data-form-group="incoming_payments">
                            <td scope="row">
                                @Html.TextBox("temp", DateTime.Now.ToString("yyyy-MM-dd"), new { @type="date", @class = "form-control", @data_form_group_subname = "due_date" })
                            </td>
                            <td scope="row">
                                @Html.TextBox("temp", "", new { @class = "form-control", @data_form_group_subname = "item" })
                            </td>
                            <td scope="row">
                                @Html.TextBox("temp", "", new { @class = "form-control", @data_form_group_subname = "amount", @onchange = "UpdateIncomingPaymentTotals(this)" })
                            </td>
                            <td scope="row">
                                @Html.TextBox("temp", "", new { @class = "form-control", @data_form_group_subname = "orderslip_number" })
                            </td>
                            <td scope="row">
                        @Html.TextBox("temp", DateTime.Now.ToString("yyyy-MM-dd"), new { @class = "form-control", @data_form_group_subname = "orderslip_date", @type="date" })
                            </td>
                            <td scope="row">
                                @Html.TextBox("temp", "", new { @class = "form-control", @data_form_group_subname = "invoice_number" })
                            </td>
                            <td scope="row">
                        @Html.TextBox("temp", DateTime.Now.ToString("yyyy-MM-dd"), new { @class = "form-control", @data_form_group_subname = "invoice_date", @type="date" })
                            </td>
                            <td scope="row">
                        <button type="button" class="btn btn-secondary" onclick="formIncomingPaymentRemove(this)">
                                    <i class="fa fa-trash" aria-hidden="true"></i>
                                </button>
                            </td>
                        </tr>
                    </tbody>
                    <tfoot>
                        <tr>
                            <td>
                                <button class="btn btn-secondary" type="button" data-form-group-target="incoming_payments">+ 新增</button>
                            </td>
                            <th class="text-end">
                                @Html.DisplayNameFor(m => m.total_income_amount)
                            </th>
                            <td>
                        <div class="input-group">
                            <span class="input-group-text">$</span>
                            @Html.TextBoxFor(m => m.total_income_amount, new { @class = "form-control", @readonly = true})
                        </div>
                            </td>
                        </tr>
                    </tfoot>
                </table>   
         @*for each outgoing payment*@
        <h5>應付項目</h5>
        <table class="table mt-4">
            <thead>
                <tr>
                    <th scope="col">@Html.LabelFor(m => m.outgoing_payments.FirstOrDefault().due_date, new { @class = "form-label form-view-hide" })</th>
                    <th scope="col">@Html.LabelFor(m => m.outgoing_payments.FirstOrDefault().company_id, new { @class = "form-label" })</th>
                    <th scope="col">@Html.LabelFor(m => m.outgoing_payments.FirstOrDefault().amount, new { @class = "form-label" })</th>
                    <th scope="col">功能</th>
                </tr>
            </thead>
            <tbody>
            @for (var i = 0; i < Model.outgoing_payments.Count(); i++)
            {
                <tr data-form-group="outgoing_payments">
                    <td scope="row">
                        @Html.LocalDateTimeInputFor(m => m.outgoing_payments[i].due_date, new { @class = "form-control", @data_form_group_subname = "due_date" })
                    </td>
                    <td scope="row">
                        <div class="input-group flex-nowrap">
                            @Html.HiddenFor(m => m.outgoing_payments[i].company_id)
                            @Html.TextBoxFor(m => m.outgoing_payments[i].company.name, new { @class = "form-control", @data_form_group_subname = "company.name", @readonly = "readonly" })
                            <button type="button" class="btn btn-secondary btn-modal"
                                data-form-group-target="outgoing_payment"
                                data-url="@Url.Action("Picker", "Company")"
                                data-toggle="modal"
                                data-target="#modal-popup">
                                <i class="fa fa-crosshairs fa-fw"></i>
                            </button>
                        </div>
                    </td>
                    <td scope="row">
                        @Html.TextBoxFor(m => m.outgoing_payments[i].amount, new { @class = "form-control", @data_form_group_subname = "amount", @onchange = "UpdateOutgoingPaymentTotals(this)" })
                    </td>
                    <td scope="row">
                            @Html.HiddenFor(m => m.outgoing_payments[i].ID)
                            @Html.Hidden("outgoing_payments.Index", i)
                        <button type="button" class="btn btn-secondary" onclick="formOutgoingPaymentRemove(this)">
                            <i class="fa fa-trash" aria-hidden="true"></i>
                        </button>
                    </td>
                </tr>
            }
            <tr class="d-none" data-form-group-start="outgoing_payments" data-form-group="outgoing_payments">
                <td scope="row">
                    @Html.TextBox("temp", 
                        DateTime.Now.ToString("yyyy-MM-dd"), 
                        new { @type="date", @class = "form-control", @data_form_group_subname = "due_date" })
                </td>
                <td scope="row">
                    <div class="input-group">
                        @Html.Hidden("temp", "", new { @class = "form-control",  @readonly = "readonly", @data_form_group_subname = "company_id" } )
                        @Html.TextBox("temp", "", new { @class = "form-control", @readonly = "readonly", @data_form_group_subname = "company.name" })
                        <button type="button" class="btn btn-secondary btn-modal"
                            data-form-group-target="outgoing_payments"
                            data-url="@Url.Action("Picker", "Company")"
                            data-toggle="modal"
                            data-target="#modal-popup">
                            <i class="fa fa-crosshairs fa-fw"></i>
                        </button>
                    </div>
                </td>
                <td scope="row">
                    @Html.TextBox("temp", "", new { @class = "form-control", @data_form_group_subname = "amount", @onchange = "UpdateOutgoingPaymentTotals(this)" })
                </td>
                <td scope="row">
                        <button type="button" class="btn btn-secondary" onclick="formOutgoingPaymentRemove(this)">
                        <i class="fa fa-trash" aria-hidden="true"></i>
                    </button>
                </td>
            </tr>
            </tbody>
            <tfoot>
                <tr>
                    <td>
                        <button class="btn btn-secondary" type="button" data-form-group-target="outgoing_payments">+ 新增</button>
                    </td>
                    <th class="text-end">
                        @Html.DisplayNameFor(m => m.total_pay_amount)
                    </th>
                    <td>
                        <div class="input-group">
                          <span class="input-group-text">$</span>
                          @Html.TextBoxFor(m => m.total_pay_amount, new { @class = "form-control", @readonly = true})
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>

                    </td>
                    <th class="text-end">
                        @Html.DisplayNameFor(m => m.net_income)
                    </th>
                    <td>
                        <div class="input-group">
                          <span class="input-group-text">$</span>
                          @Html.TextBoxFor(m => m.net_income, new { @class = "form-control", @readonly = true})
                        </div>
                    </td>
                </tr>
            </tfoot>
        </table>
        @*for each product*@
        <h5>設備/授權/服務清單</h5>
        <table class="table mt-4">
        <thead>
            <tr>
                <th scope="col">@Html.LabelFor(m => m.products.FirstOrDefault().product.category, new { @class = "form-label" })</th>
                <th scope="col">@Html.LabelFor(m => m.products.FirstOrDefault().product.brand.name, new { @class = "form-label" } )</th>
                <th scope="col">@Html.LabelFor(m => m.products.FirstOrDefault().product.model_name, new { @class = "form-label" })</th>
                <th scope="col">@Html.LabelFor(m => m.products.FirstOrDefault().serial_number, new { @class = "form-label" })</th>
                <th scope="col">功能</th>
            </tr>
        </thead>
        <tbody>

            @for (var i = 0; i < Model.products.Count(); i++)
            {
                <tr data-form-group="products">
                    <td scope="row">
                        @Html.HiddenFor(m => m.products[i].product_id, new { @data_form_group_subname = "product_id" } )
                        @Html.TextBox("temp", Model.products[i].product.category.GetDisplayName(), new { @class = "form-control", @readonly="readonly", @data_form_group_subname = "category" })
                    </td>
                    <td scope="row">
                        @Html.TextBoxFor( m => m.products[i].product.brand.name, new { @class = "form-control", @readonly="readonly", @data_form_group_subname = "product.brand.name" })
                    </td>
                    <td scope="row">
                        <div class="input-group">
                            @Html.TextBoxFor( m => m.products[i].product.model_name, new { @class = "form-control", @readonly="readonly", @data_form_group_subname = "product.model_name" })
                            <button type="button" class="btn btn-secondary btn-modal"
                                data-form-group-target="products"
                                data-url="@Url.Action("Picker", "Product")"
                                data-toggle="modal"
                                data-target="#modal-popup">
                                <i class="fa-solid fa-pen-to-square"></i>
                            </button>
                        </div>
                    </td>
                    <td scope="row">
                        @Html.TextBoxFor(m => m.products[i].serial_number, new { @class = "form-control", @data_form_group_subname = "serial_number" })
                    </td>
                    <td scope="row">
                        @Html.HiddenFor(m => m.products[i].ID)
                        @Html.Hidden("products.Index", i)
                        <button type="button" class="btn btn-secondary" onclick="formGroupRemove(this)">
                            <i class="fa fa-trash" aria-hidden="true"></i>
                        </button>
                    </td>
                </tr>
            }
            <tr class="d-none" data-form-group-start="products" data-form-group="products">
                <td scope="row">
                    @Html.Hidden("temp", "", new { @data_form_group_subname = "product_id" } )
                    @Html.TextBox("temp", "", new { @class = "form-control", @readonly="readonly", @data_form_group_subname = "category" })
                </td>
                <td scope="row">
                    @Html.TextBox("temp", "", new { @class = "form-control", @readonly="readonly", @data_form_group_subname = "product.brand.name" })
                </td>
                <td scope="row">
                    <div class="input-group">
                        @Html.TextBox("temp", "", new { @class = "form-control", @readonly="readonly", @data_form_group_subname = "product.model_name" })
                        <button type="button" class="btn btn-secondary btn-modal"
                                data-form-group-target="products"
                                data-url="@Url.Action("Picker", "Product")"
                                data-toggle="modal"
                                data-target="#modal-popup">
                            <i class="fa-solid fa-pen-to-square"></i>
                        </button>
                    </div>
                </td>
                <td scope="row">
                    @Html.TextBox("temp", "", new { @class = "form-control", @data_form_group_subname = "serial_number" })
                </td>
                <td scope="row">
                    <button type="button" class="btn btn-secondary" onclick="formGroupRemove(this)">
                        <i class="fa fa-trash" aria-hidden="true"></i>
                    </button>
                </td>
            </tr>
        </tbody>
        <tfoot>
            <tr>
                <td>
                    <button class="btn btn-secondary" type="button" data-form-group-target="products">+ 新增</button>
                </td>
            </tr>
        </tfoot>
    </table>
    </form>

</div>

<div aria-hidden="true" role="dialog" tabindex="-1" id="modal-confirm-renew-project-popup" class="modal fade">
    <div class="modal-dialog">
    </div>
</div>

@section Scripts {
<script>

    $(function () {
        
            window.addEventListener('message', (event) => {
                event.preventDefault();
                if (event.data?.contact) {
                    var contact = $('#contact_name');
                    var company_id = $('#company_id').val();
                    if (company_id != null) {
                        UpdatePersona(contact, company_id, event.data.contact);
                    }
                }
            });

            $('#addContact').on('click', function (e) {
                e.preventDefault();
                var company_id = $('#company_id').val();
                window.open('@HttpUtility.JavaScriptStringEncode(Url.Action("New", "Contact"))?company_id='+company_id);
            });

        $('#subtypes').select2();
        $('#update').initAsToggleForm(false);

        var $btnAddDiscount = $('#change-company');
        $btnAddDiscount.on('modal-success', (evt, $formTarget, data) => {
            console.log($formTarget.find('#contact_name'))
            console.log(data.company_id)
            UpdatePersona($formTarget.find('#contact_name'), data.company_id)
        });

        let btnRenew = document.getElementById('renew_project');

        $(btnRenew).on('click', (e) => {
                
            var btn = $(e.currentTarget);
            var rowID = btn.data('index');

            var url = '@Url.ActionLink("RenewContractPopUp")' + '?id=' + @Model.ID;
            var target = $('#modal-confirm-renew-project-popup');

            $.get(url).done(function (data) {
                target.find(".modal-dialog").html(data);
                target.modal("show");
            });
        });

    })

    function UpdateBrandModelList(_this) 
    {
        var _prod = _this.value;
        UpdateBrand(_prod, _this);
        UpdateModel(_prod, _this);

    }

    function UpdateBrand(_prod, _this)
    {
        var $target = $(_this).closest('[data-form-group]').find('.select-brand')
        $target.loadSelect(
            '@HttpUtility.JavaScriptStringEncode(Url.Action("ListBrandForCategory", "Project"))',
            { ID: _prod });
    }

    function UpdatePersona(_persona, _comp, selectedID) {
        var $target = _persona
        $target.loadSelect(
        '@HttpUtility.JavaScriptStringEncode(Url.Action("ListPersonaPerCompany", "Project"))',
                { ID: _comp, SelectedID: selectedID });
    }

    function UpdateModel(_prod, _this)
    {
        var $target = $(_this).closest('[data-form-group]').find('.select-model')
        $target.loadSelect(
            '@HttpUtility.JavaScriptStringEncode(Url.Action("ListModelForCategory", "Project"))',
            { ID: _prod });
    }

    function onTypeChange(proj_type) {
        UpdateSubType($('#subtypes'), proj_type.value);
    }

    function UpdateSubType(_type, _proj_type) {
            $('#subtypes').val(null).trigger('change');
            $('#subtypes').select2({
                ajax: {
                    method: 'POST',
                    url: '/Project/ListSubType',
                    dataType: 'json',
                    data: { comp_type: _proj_type }
                }
            });
        }

    function formIncomingPaymentRemove(element) {
            let $ele = $(element);
            let event = $.Event('form-group-remove');
            var $group = formGroupGetFromChild($ele);
            $group.trigger(event);

            if (event.isDefaultPrevented()) {
                return false;    // if default is prevented, then form group doesn't get removed
            }

            $parent = $group.parent();

            // check if this group came from the server
            var prefix = formGroupGetPrefix($group);
            if (prefix != null) {
                var id = $group.find(`[name="${prefix}.ID"]`);
                if (id != null && id.length > 0) {
                    $group.prepend(`<input type="hidden" name="${prefix}.Deleted" value="true" />`);
                    $group.hide();
                    UpdateIncomingPaymentTotals(element);
                    return;
                }
            }
            $group.trigger('form-group-removed');
            $group.remove();
            UpdateIncomingPaymentTotals(element);
        }

        function formOutgoingPaymentRemove(element) {
            let $ele = $(element);
            let event = $.Event('form-group-remove');
            var $group = formGroupGetFromChild($ele);
            $group.trigger(event);

            if (event.isDefaultPrevented()) {
                return false;    // if default is prevented, then form group doesn't get removed
            }

            $parent = $group.parent();
            console.log($group);
            // check if this group came from the server
            var prefix = formGroupGetPrefix($group);
            if (prefix != null) {
                var id = $group.find(`[name="${prefix}.ID"]`);
                if (id != null && id.length > 0) {
                    $group.prepend(`<input type="hidden" name="${prefix}.Deleted" value="true" />`);
                    $group.hide();
                    UpdateOutgoingPaymentTotals(element);
                    return;
                }
            }

            $group.trigger('form-group-removed');
            $group.remove();
            UpdateOutgoingPaymentTotals(element);
        }

    var total_income_amount = @Model.total_income_amount;
    function UpdateIncomingPaymentTotals(_this) {
        private_total_income_amount = 0;
            var t = $('[data-form-group=incoming_payments]:visible').not('.d-none').find('[data-form-group-subname=amount]')
        t.each(function(index, value)
            {
                private_total_income_amount += parseInt(t[index].value);
            }
        );
        total_income_amount = private_total_income_amount;
        $('#total_income_amount').val(private_total_income_amount);
        UpdateNetIncome();
    }

    var total_pay_amount = @Model.total_pay_amount;
    function UpdateOutgoingPaymentTotals(_this) {
        private_total_pay_amount = 0;
        var t = $('[data-form-group=outgoing_payments]:visible').not('.d-none').find('[data-form-group-subname=amount]')
        t.each(function(index, value)
            {
                private_total_pay_amount += parseInt(t[index].value);
            }
        );
        total_pay_amount = private_total_pay_amount;
        $('#total_pay_amount').val(private_total_pay_amount);
        UpdateNetIncome();
    }

    function UpdateNetIncome(){
        $('#net_income').val(total_income_amount - total_pay_amount);
    }

</script>
}