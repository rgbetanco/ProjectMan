@model repairman.Models.ProjectModel
@using CSHelper.Extensions
@{
    ViewData["Title"] = "報修清單";
    ViewData["AutoReload"] = true;
    Layout = "_Layout";
    
}

<div class="container text-center">
    <form id="update" asp-action="ProjectNew">
    <!-- Store/History buttons -->
    <div class="row">
        <div class="col text-start">
            <button type="button" class="btn btn-light btn-back"><span class="fa fa-caret-left fa-fw me-1"></span></button>
            <button type="submit" class="btn btn-primary">儲存</button>
        </div>
        <div class="col-6">
           
        </div>
        <div class="col text-end">
            @*<button class="btn btn-primary">歷史</button>*@
        </div>
    </div>

    <div class="row mt-4 text-start">
        <div class="col-5">
            @Html.LabelFor(m => m.name, new { @class = "form-label form-view-hide" })
            @Html.TextBoxFor(m => m.name, new { @class = "form-control form-text" })
        </div>
        <div class="col">
            @Html.LabelFor(m => m.number, new { @class = "form-label" })
            @Html.TextBoxFor(m => m.number, new {@class = "form-control form-text"})
        </div>
        <div class="col-5">
            @Html.LabelFor(m => m.service_type, new { @class = "form-label" })
            @Html.DropDownListFor(m => m.service_type, CSHelper.Extensions.RenderingExtension.GetSelectList<ServiceTypeEnum>(), new { @class = "form-select" })
        </div>
    </div>

    <div class="row text-start mt-4">
        <div class="col-2">
            @Html.LabelFor(m => m.status, new { @class = "form-label" })
            @Html.DropDownListFor(m => m.status, CSHelper.Extensions.RenderingExtension.GetSelectList<ProjectStatusEnum>(), new { @class = "form-select" })
        </div>
        <div class="col-2 mt-4">
            <button class="btn btn-secondary">轉出新案</button>
        </div>
        <div class="col-4">
            @Html.LabelFor(m => m.starting_datetime, new { @class = "form-label form-view-hide" })
            @Html.LocalDateTimeInputFor(m => m.starting_datetime, new { @class = "form-control", @step = "1" })
        </div>
        <div class="col-4">
            @Html.LabelFor(m => m.ending_datetime, new { @class = "form-label form-view-hide" })
            @Html.LocalDateTimeInputFor(m => m.ending_datetime, new { @class = "form-control", @step = "1" })
        </div>
    </div>

    <div class="row text-start mt-4">
        <div class="col-3">
            @Html.LabelFor(m => m.user_id, new { @class = "form-label" })
            @Html.DropDownListFor(m => m.user_id, (IEnumerable<SelectListItem>)ViewData["sales_person"], new { @class = "form-select" })
        </div>
        <div class="col-3">
            @Html.LabelFor(m => m.importance_id, new { @class = "form-label" })
            @Html.DropDownListFor(m => m.importance_id, (IEnumerable<SelectListItem>)ViewData["importance"], new { @class = "form-select" })
        </div>
        <div class="col-6"></div>
    </div>

    <div class="row text-start mt-4">
        <div class="col-6">
                <div class="input-group">
                    @Html.HiddenFor(m => m.company_id, new { @class = "form-control",  @readonly = "readonly" } )
                    @Html.TextBoxFor(m => m.company.name, new { @class = "form-control",  @readonly = "readonly" })
                    <button type="button" class="btn btn-secondary btn-modal"
                            data-form-target ="#update"
                            data-url="@Url.Action("Picker", "Company")"
                            data-toggle="modal"
                            data-target="#modal-popup">
                        <i class="fa fa-crosshairs fa-fw"></i>
                    </button>
                </div>
        </div>
        <div class="col-6">
                <div class="input-group">
                    @Html.HiddenFor(m => m.persona_id, new { @class = "form-control",  @readonly = "readonly" } )
                    @Html.TextBoxFor(m => m.persona.name, new { @class = "form-control",  @readonly = "readonly" })
                    <button type="button" class="btn btn-secondary btn-modal"
                            data-form-target ="#update"
                            data-url="@Url.Action("Picker", "Persona")"
                            data-toggle="modal"
                            data-target="#modal-popup">
                        <i class="fa fa-crosshairs fa-fw"></i>
                    </button>
                </div>
        </div>
    </div>

    <div class="row text-start mt-4">
        <div class="col-6">
            @Html.LabelFor(m => m.contact_address, new { @class = "form-label" })
            @Html.TextBoxFor(m => m.contact_address, new {@class = "form-control form-text"})
        </div>
        
        <div class="col-5">
            @Html.LabelFor(m => m.contact_phone, new { @class = "form-label" })
            @Html.TextBoxFor(m => m.contact_phone, new {@class = "form-control form-text"})
        </div>

    </div>

    <div class="row text-start mt-4">
        <div class="col-7">
            @Html.LabelFor(m => m.remarks, new { @class = "form-label" })
            @Html.TextAreaFor(m => m.remarks, new {@class = "form-control form-text"})
        </div>
    </div>
        <!-- Product List -->
        <table class="table mt-4">
            <thead>
                <tr>
                    <th scope="col">@Html.LabelFor(m => m.product_list.FirstOrDefault().category, new { @class = "form-label" })</th>
                    <th scope="col">@Html.LabelFor(m => m.product_list.FirstOrDefault().brand, new { @class = "form-label" } )</th>
                    <th scope="col">@Html.LabelFor(m => m.product_list.FirstOrDefault().model, new { @class = "form-label" })</th>
                    <th scope="col">@Html.LabelFor(m => m.product_list.FirstOrDefault().serial_number, new { @class = "form-label" })</th>
                    <th scope="col">功能</th>
                </tr>
            </thead>
            <tbody>
                <tr class="d-none" data-form-group-start="Product_List" data-form-group="Product_List">
                    <td scope="row">
                        @Html.DropDownList("temp", (IEnumerable<SelectListItem>)ViewData["categories"], new { @class = "form-select", @data_form_group_subname = "category_id", @onchange = "javascript:UpdateBrandModelList(this);" })
                    </td>
                    <td scope="row">
                        @Html.DropDownList("temp", (IEnumerable<SelectListItem>)ViewData["brands"], new { @class = "form-select select-brand", @data_form_group_subname = "product_brand_id" })
                    </td>
                    <td scope="row">
                        @Html.DropDownList("temp", (IEnumerable<SelectListItem>)ViewData["models"], new { @class = "form-select select-model", @data_form_group_subname = "product_model_id" })
                    </td>
                    <td scope="row">
                        @Html.TextBox("temp", "", new { @class = "form-control", @data_form_group_subname = "serial_number" })
                    </td>
                    <td scope="row">
                        <button type="button" class="btn btn-secondary" onclick="formGroupRemove(this)">
                            <i class="fa fa-trash" aria-hidden="true"></i>
                        </button>
                    </td>
                </tr>
            </tbody>
        </table>
        <button class="btn btn-secondary" type="button" data-form-group-target="Product_List">新增成員</button>
        <!-- Incoming payment -->
        <table class="table mt-4">
            <thead>
                <tr>
                    <th scope="col">@Html.LabelFor(m => m.incoming_payment.FirstOrDefault().issueDate, new { @class = "form-label form-view-hide" })</th>
                    <th scope="col">@Html.LabelFor(m => m.incoming_payment.FirstOrDefault().item, new { @class = "form-label" })</th>
                    <th scope="col">@Html.LabelFor(m => m.incoming_payment.FirstOrDefault().amount, new { @class = "form-label" })</th>
                    <th scope="col">@Html.LabelFor(m => m.incoming_payment.FirstOrDefault().invoice, new { @class = "form-label" })</th>
                    <th scope="col">功能</th>
                </tr>
            </thead>
            <tbody>
                <tr class="d-none" data-form-group-start="incoming_payment" data-form-group="incoming_payment">
                    <td scope="row">
                        @Html.LocalDateTimeInput("temp", "", new { @class = "form-control", @data_form_group_subname = "issueDate" })
                    </td>
                    <td scope="row">
                        @Html.TextBox("temp", "", new { @class = "form-control", @data_form_group_subname = "item" })
                    </td>
                    <td scope="row">
                        @Html.TextBox("temp", "", new { @class = "form-control", @data_form_group_subname = "amount" })
                    </td>
                    <td scope="row">
                        @Html.TextBox("temp", "", new { @class = "form-control", @data_form_group_subname = "invoice" })
                    </td>
                    <td scope="row">
                        <button type="button" class="btn btn-secondary" onclick="formGroupRemove(this)">
                            <i class="fa fa-trash" aria-hidden="true"></i>
                        </button>
                    </td>
                </tr>
            </tbody>
        </table>
        <button class="btn btn-secondary" type="button" data-form-group-target="incoming_payment">新增成員</button>
        <!-- Outgoing payment -->
        <table class="table mt-4">
            <thead>
                <tr>
                    <th scope="col">@Html.LabelFor(m => m.outgoing_payment.FirstOrDefault().issueDate, new { @class = "form-label form-view-hide" })</th>
                    <th scope="col">@Html.LabelFor(m => m.outgoing_payment.FirstOrDefault().company_id, new { @class = "form-label" })</th>
                    <th scope="col">@Html.LabelFor(m => m.outgoing_payment.FirstOrDefault().amount, new { @class = "form-label" })</th>
                    <th scope="col">功能</th>
                </tr>
            </thead>
            <tbody>
                <tr class="d-none" data-form-group-start="outgoing_payment" data-form-group="outgoing_payment">
                    <td scope="row">
                        @Html.LocalDateTimeInput("temp", "", new { @class = "form-control", @data_form_group_subname = "issueDate" })
                    </td>
                    <td scope="row">
                        <div class="input-group">
                            @Html.Hidden("temp", "", new { @class = "form-control",  @readonly = "readonly", @data_form_group_subname = "company_id" } )
                            @Html.TextBox("temp", "", new { @class = "form-control", @readonly = "readonly", @data_form_group_subname = "company.name" })
                            <button type="button" class="btn btn-secondary btn-modal"
                                    data-form-group-target="outgoing_payment"
                                    data-url="@Url.Action("Picker", "Company")"
                                    data-toggle="modal"
                                    data-target="#modal-popup">
                                <i class="fa fa-crosshairs fa-fw"></i>
                            </button>
                        </div>
                    </td>
                    <td scope="row">
                        @Html.TextBox("temp", "", new { @class = "form-control", @data_form_group_subname = "amount" })
                    </td>
                    <td scope="row">
                        <button type="button" class="btn btn-secondary" onclick="formGroupRemove(this)">
                            <i class="fa fa-trash" aria-hidden="true"></i>
                        </button>
                    </td>
                </tr>
            </tbody>
        </table>
        <button class="btn btn-secondary" type="button" data-form-group-target="outgoing_payment">新增成員</button>
    </form>
        
</div>

@section Scripts {
    <script>
        $(function () {
            var form = $('#update');
            form.initAsAjaxForm({
                success: function (data) {
                    var result = createErrorList(data);
                    if (result == null) {
                        window.history.back();
                    } else {
                        var alert = form.find(".alert");
                        alert.html(result);
                        alert.removeClass('d-none');
                    }
                },
                error: function (xhr, textStatus, errorThrown) {
                    var alert = form.find(".alert");
                    alert.text(AjaxErrorToString(xhr, textStatus, errorThrown));
                    alert.removeClass('d-none');
                },
                validate: function () {
                    return null
                }
            });
        });

        function UpdateBrandModelList(_this) 
        {
            var _prod = _this.value;
            UpdateBrand(_prod, _this);
            UpdateModel(_prod, _this);
            
        }
        function UpdateBrand(_prod, _this)
        {
            var $target = $(_this).closest('[data-form-group]').find('.select-brand')
            $target.loadSelect(
                '@HttpUtility.JavaScriptStringEncode(Url.Action("ListBrandForCategory", "Project"))',
                { ID: _prod });
        }

        function UpdateModel(_prod, _this)
        {
            var $target = $(_this).closest('[data-form-group]').find('.select-model')
            $target.loadSelect(
                '@HttpUtility.JavaScriptStringEncode(Url.Action("ListModelForCategory", "Project"))',
                { ID: _prod });
        }
    </script>
}